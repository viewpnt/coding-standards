#!/usr/bin/env php
<?php
/**
 * ----------------------------------------------------------------------------
 * This code is part of the Sclable Business Application Development Platform
 * and is subject to the provisions of your License Agreement with
 * Sclable Business Solutions GmbH.
 *
 * @copyright (c) 2015 Sclable Business Solutions GmbH
 * ----------------------------------------------------------------------------
 */

if (PHP_SAPI !== 'cli') {
    echo 'Warning: bob should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;
}

$test = isset($argv[1]) ? $argv[1] : null;

if (empty($test)) {
    echo 'missing command line argument.' . PHP_EOL . 'usage: ' . $argv[0] . ' <dir|filename>' . PHP_EOL;
    die(1);
}

$cwd = getcwd();
$vendorDir = dirname(__FILE__) .DIRECTORY_SEPARATOR .'..' .DIRECTORY_SEPARATOR .'vendor';
if(!is_dir($vendorDir)) { //check dir exists in case of use this script within the "phing ci" task
    $vendorDir = dirname(__FILE__) .DIRECTORY_SEPARATOR .'..';
}
$autoloadFile = $vendorDir .DIRECTORY_SEPARATOR .'autoload.php';
while(is_dir($vendorDir) && !file_exists($autoloadFile)) { //find the closest vendor directory
    $vendorDir .= DIRECTORY_SEPARATOR .'..';
    $autoloadFile = $vendorDir .DIRECTORY_SEPARATOR .'autoload.php';
}

/** @noinspection PhpIncludeInspection */
include $vendorDir .DIRECTORY_SEPARATOR .'autoload.php';

if (is_dir($test) || is_file($test)) {
    $testDir = $test;
} else {
    $testDir = $cwd . '/' . $test;
    if (!is_dir($testDir) && !is_file($testDir)) {
        echo 'file or directory not found: ' . $test . PHP_EOL;
        die(1);
    }
}

echo '------ run code sniffer ------' . PHP_EOL;

$processBuilder = new \Symfony\Component\Process\ProcessBuilder([ $vendorDir .'/bin/phpcs', '-p' ]);
$processBuilder
    ->setWorkingDirectory($cwd)
    ->add('--standard=' . dirname(__DIR__) . '/src/php/php_coding_standards/SclableStandard/ruleset.xml')
    ->add($testDir);

passthru($processBuilder->getProcess()->getCommandLine(), $phpCsReturn);

if ($phpCsReturn === 0) {
    echo PHP_EOL;
    echo '> everything is ok.' . PHP_EOL . PHP_EOL;
}

echo '------ run mess detector ------' . PHP_EOL;

$processBuilder = new \Symfony\Component\Process\ProcessBuilder([ $vendorDir .'/bin/phpmd' ]);
$processBuilder
    ->setWorkingDirectory($cwd)
    ->add($testDir)
    ->add('text')
    ->add(dirname(__DIR__) . '/src/php/php_coding_standards/SclableMessDetection/ruleset.xml');

passthru($processBuilder->getProcess()->getCommandLine(), $phpMdReturn);

if ($phpMdReturn === 0) {
    echo '> everything is ok.' . PHP_EOL;
    echo PHP_EOL;
}

exit($phpCsReturn + $phpMdReturn);
